(function() {
  'use strict';

  angular
    .module('cdrsDashboard')
    .controller('DashboardController', DashboardController);

  /** @ngInject */
  function DashboardController(cdrs, moment) {

    var vm = this;

    // vm.today = new Date();
    vm.today = new Date("2016-09-11");

    getBadgeData(vm.today, cdrs);
    getWeeklyTotalUser(vm.today);
    getWeeklyTotalCall(vm.today);

    vm.userChartConfig = {
        options: {
            chart: {
                type: 'line',
                zoomType: 'x'
            }
        },
        title: {
           text: 'User Statistics This Week'
        },
        series: populateUserChartData(vm.today),
        xAxis: {
          type: 'category',
          dateTimeLabelFormats: {
             day: '%d %B'    //ex- 01 Jan 2016
          }
        },
        loading: false
    }

    vm.callChartConfig = {
        options: {
            chart: {
                type: 'line',
                zoomType: 'x'
            }
        },
        title: {
           text: 'Call Statistics This Week'
        },
        series: populateCallChartData(vm.today),
        xAxis: {
          type: 'category',
          dateTimeLabelFormats: {
             day: '%d %B'    //ex- 01 Jan 2016
          }
        },
        loading: false
    }
    
    vm.deviceChartConfig = {
          options: {
          chart: {
              type: 'column'
          }
          },
          title: {
            text: 'User Device Count'
          },
          series : [{
             name: 'Used by user',
             colorByPoint: true,
             data : getUserDevice(vm.today)
          }],
          xAxis: {
            type: 'category'
          },
          loading: false
      }


    function getBadgeData(date){

        var starttime = moment(date).startOf('day').format("YYYYMMDDHHmmss").toString();
        var endtime = moment(date).endOf('day').format("YYYYMMDDHHmmss").toString();

        var userService = new cdrs.getUserCount();

        userService.get({start : starttime , end : endtime} , function(callback){
          vm.newUser = callback.inrange;
          vm.newVerifiedUser = callback.inrangever;
        });

        var callService = new cdrs.getCallCount();

        callService.get({start : starttime , end : endtime} , function(callback){
          vm.callAttempt = callback.init;
          vm.avgCallAttempt = callback.ring;
        });
    }

    function getUserDevice(date){
      
      var userDevice = [];
      var starttime = moment(date).startOf('isoweek').format("YYYYMMDDHHmmss").toString();
      var endtime = moment(date).endOf('isoweek').format("YYYYMMDDHHmmss").toString();

      userDevice.push({name : "Lenovo"}) //0
      userDevice.push({name : "Unknown"}) //1
      userDevice.push({name : "Samsung"}) //2
      userDevice.push({name : "Sony"}) //3
      userDevice.push({name : "Andromax"}) //4

      var service = new cdrs.getUserDeviceCount();

      var serviceCall = service.get({start : starttime, end : endtime});
        serviceCall.$promise.then(function(data){
          // console.log(data)
          userDevice[0].y = data.totallenovo;
          vm.lenovo = data.totallenovo;
          userDevice[0].color = '#FF5722';
          userDevice[1].y = data.totalunknown;
          vm.unknown = data.totalunknown;
          userDevice[1].color = '#4CAF50';
          userDevice[2].y = data.totalsamsung;
          vm.samsung = data.totalsamsung;
          userDevice[2].color = '#03A9F4';
          userDevice[3].y = data.totalsony;
          vm.sony = data.totalsony;
          userDevice[3].color = '#009688';
          userDevice[4].y = data.totalandromax;
          vm.andromax = data.totalandromax;
          userDevice[4].color = '#F44336';
      });

      return userDevice
    }

    function initializeDate(date){
      
      var dateRange = [];
      var timestart = moment(date).startOf('isoweek').format("MM/DD/YYYY h:mm:ss A").toString();
      
      for (var d = new Date(timestart); d <= date; d.setDate(d.getDate() + 1)) {

        var starttime = moment(d).startOf('day').format("MM/DD/YYYY h:mm:ss A").toString();
        var timeformat = moment(starttime, "MM/DD/YYYY h:mm:ss A").format("DD MMM").toString();
        dateRange.push({name : timeformat})

      }

      return dateRange;
    }

    function fetchUser(date, arr, key, index, service){

      var starttime = moment(date).startOf('day').format("YYYYMMDDHHmmss").toString();
      var endtime = moment(date).endOf('day').format("YYYYMMDDHHmmss").toString();

      var serviceCall = service.get({start : starttime, end : endtime});
        serviceCall.$promise.then(function(data){
          if(key) { 
            //get user data
            arr[index].y = data.inrange;
          }
          else{ 
            //get verified user data
            arr[index].y = data.inrangever;
          }
      })
    }

    function loadUserData(date, key){

      var dataArray = initializeDate(date);
      
      var userService = new cdrs.getUserCount();
      var i=0
      
      var timestart = moment(date).startOf('isoweek').format("MM/DD/YYYY h:mm:ss A").toString();
      for (var d = new Date(timestart); d <= date; d.setDate(d.getDate() + 1)) {
        fetchUser(d, dataArray, key, i, userService);
        i++;
      }
      return dataArray;
    }

    function populateUserChartData(date){
      var user = loadUserData(date,1)
      var verified = loadUserData(date,0)

      return [
          {
              name : "New User", 
              data : user
          },
          {
              name : "New Verified User", 
              data : verified
          }
      ];
    }

    function getWeeklyTotalUser(date){

      var firstDayInWeek = moment(date).startOf('isoweek').format("MM/DD/YYYY h:mm:ss A").toString();

      var starttime = moment(firstDayInWeek, "MM/DD/YYYY h:mm:ss A").startOf('day').format("YYYYMMDDHHmmss").toString();
      var endtime = moment(date).endOf('day').format("YYYYMMDDHHmmss").toString();
      var service = new cdrs.getUserCount();

      var serviceCall = service.get({start : starttime, end : endtime});
        serviceCall.$promise.then(function(data){
          vm.all = data.all;
         vm.allver = data.allver;
         vm.inrange = data.inrange;
         vm.inrangever = data.inrangever;
      })

    }
    
    function fetchCall(date, arr, key, index, service){

      var starttime = moment(date).startOf('day').format("YYYYMMDDHHmmss").toString();
      var endtime = moment(date).endOf('day').format("YYYYMMDDHHmmss").toString();

      var serviceCall = service.get({start : starttime, end : endtime});
        serviceCall.$promise.then(function(data){
          if(key === 1) { 
            arr[index].y = data.init;
          }
          else if(key === 2){ 
            arr[index].y = data.ring;
          }
          else { 
            arr[index].y = data.accept;
          }
      })
    }

    function loadCallData(date, key){

      var dataArray = initializeDate(date);
      
      var callService = new cdrs.getCallCount();
      var i=0
      
      var timestart = moment(date).startOf('isoweek').format("MM/DD/YYYY h:mm:ss A").toString();
      for (var d = new Date(timestart); d <= date; d.setDate(d.getDate() + 1)) {
        fetchCall(d, dataArray, key, i, callService);
        i++;
      }
      return dataArray;
    }

    function populateCallChartData(date){
      var init = loadCallData(date,1)
      var ring = loadCallData(date,2)
      var accept = loadCallData(date,3)

      return [
          {
              data: init, 
              name: 'Call Attempt'
          },
          {
              data: ring, 
              name: 'Incoming Call'
          },
          {
              data: accept, 
              name: 'Accepted Call'
          }
      ];
    }

    function getWeeklyTotalCall(date){

      var firstDayInWeek = moment(date).startOf('isoweek').format("MM/DD/YYYY h:mm:ss A").toString();

      var starttime = moment(firstDayInWeek, "MM/DD/YYYY h:mm:ss A").startOf('day').format("YYYYMMDDHHmmss").toString();
      var endtime = moment(date).endOf('day').format("YYYYMMDDHHmmss").toString();

      var service = new cdrs.getCallCount();

      var serviceCall = service.get({start : starttime, end : endtime});
        serviceCall.$promise.then(function(data){
         vm.attempt = data.init;
         vm.incoming = data.ring;
         vm.accept = data.accept;
      })

    }


  }

})();
